import requests
import time
import numpy as np
import talib

# Th√¥ng tin Bot Telegram c·ªßa b·∫°n
TELEGRAM_BOT_TOKEN = "7650170728:AAECcS5Vt-YjqPGUM-yuYVaRPaZXeZtKvXU"
TELEGRAM_CHAT_ID = "8064690746"

# L∆∞u tr·ªØ c√°c t√≠n hi·ªáu ƒë√£ g·ª≠i
sent_signals = {}


def send_telegram_alert(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
        response = requests.post(url, data=payload, timeout=10)
        print(f"ƒê√£ g·ª≠i th√¥ng b√°o: {message}")
    except Exception as e:
        print(f"L·ªói g·ª≠i Telegram: {e}")


# L·∫•y d·ªØ li·ªáu t·ª´ Binance
def get_klines(symbol='BTCUSDT', interval='1h', limit=100):
    try:
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        response = requests.get(url, timeout=10)
        data = response.json()

        # Ki·ªÉm tra n·∫øu data r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá
        if not data or len(data) == 0:
            print(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho {symbol}")
            return None, None, None, None

        # Ki·ªÉm tra format d·ªØ li·ªáu t·ª´ Binance
        closes = []
        highs = []
        lows = []
        volumes = []

        for candle in data:
            if len(candle) >= 6:  # ƒê·∫£m b·∫£o candle c√≥ ƒë·ªß d·ªØ li·ªáu
                try:
                    highs.append(float(candle[2]))
                    lows.append(float(candle[3]))
                    closes.append(float(candle[4]))
                    volumes.append(float(candle[5]))
                except (ValueError, IndexError):
                    continue

        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu
        if len(closes) < 30 or len(highs) < 30 or len(lows) < 30:
            print(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n cho {symbol}")
            return None, None, None, None

        return np.array(highs), np.array(lows), np.array(closes), np.array(
            volumes)

    except Exception as e:
        print(f"L·ªói l·∫•y d·ªØ li·ªáu Binance cho {symbol}: {e}")
        return None, None, None, None


def calculate_poc(highs, lows, volumes, num_bins=20):
    """
    T√¨m POC (Point of Control) t·ª´ Volume Profile.
    """
    try:
        if len(highs) == 0 or len(lows) == 0 or len(volumes) == 0:
            return 0

        price_range = np.linspace(min(lows), max(highs), num_bins)
        volume_at_price = np.ones_like(price_range)

        for high, low, volume in zip(highs, lows, volumes):
            mask = (price_range >= low) & (price_range <= high)
            volume_at_price[mask] += volume

        poc = price_range[np.argmax(volume_at_price)]
        return poc
    except Exception as e:
        print(f"L·ªói t√≠nh POC: {e}")
        return 0


def check_ut_bot(symbol='BTCUSDT', interval='1h'):
    """Ki·ªÉm UT Bot, th√™m RSI, MACD, Volume Profile ƒë·ªÉ l·ªçc t√≠n hi·ªáu LONG ho·∫∑c SHORT n·∫øu c√≥."""
    try:
        print(f"ƒêang ph√¢n t√≠ch {symbol}...")
        highs, lows, closes, volumes = get_klines(symbol=symbol,
                                                  interval=interval)

        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
        if highs is None or lows is None or closes is None or volumes is None:
            print(f"B·ªè qua {symbol} - kh√¥ng c√≥ d·ªØ li·ªáu")
            return

        # T√≠nh to√°n c√°c ch·ªâ s·ªë k·ªπ thu·∫≠t v·ªõi ki·ªÉm tra
        try:
            atr_array = talib.ATR(highs, lows, closes, timeperiod=10)
            if len(atr_array) == 0 or np.isnan(atr_array[-1]):
                print(f"Kh√¥ng th·ªÉ t√≠nh ATR cho {symbol}")
                return
            atr = atr_array[-1]
            stop = closes[-1] - atr
        except Exception as e:
            print(f"L·ªói t√≠nh ATR cho {symbol}: {e}")
            return

        try:
            rsi_array = talib.RSI(closes, timeperiod=14)
            if len(rsi_array) == 0 or np.isnan(rsi_array[-1]):
                print(f"Kh√¥ng th·ªÉ t√≠nh RSI cho {symbol}")
                return
            rsi = rsi_array[-1]
        except Exception as e:
            print(f"L·ªói t√≠nh RSI cho {symbol}: {e}")
            return

        try:
            macd_array, signal_array, _ = talib.MACD(closes,
                                                     fastperiod=12,
                                                     slowperiod=26,
                                                     signalperiod=9)
            if len(macd_array) == 0 or len(signal_array) == 0 or np.isnan(
                    macd_array[-1]) or np.isnan(signal_array[-1]):
                print(f"Kh√¥ng th·ªÉ t√≠nh MACD cho {symbol}")
                return
            macd = macd_array[-1]
            signal = signal_array[-1]
        except Exception as e:
            print(f"L·ªói t√≠nh MACD cho {symbol}: {e}")
            return

        poc = calculate_poc(highs, lows, volumes)

        current_price = closes[-1]
        print(
            f"{symbol}: Price={current_price:.4f}, Stop={stop:.4f}, RSI={rsi:.2f}, MACD={macd:.6f}, Signal={signal:.6f}, POC={poc:.4f}"
        )

        # Ki·ªÉm tra t√≠n hi·ªáu LONG
        if current_price > stop and rsi > 50 and macd > signal and current_price > poc:
            signal_key = f"LONG_{symbol}"
            if signal_key not in sent_signals:
                send_telegram_alert(f"üü¢ LONG_{symbol} - Gi√°: {current_price:.4f}")
                print(f"‚úÖ LONG signal cho {symbol}")
                sent_signals[signal_key] = time.time()
            else:
                print(f"üîÑ LONG signal cho {symbol} ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥")

        # Ki·ªÉm tra t√≠n hi·ªáu SHORT
        elif current_price < stop and rsi < 50 and macd < signal and current_price < poc:
            signal_key = f"SHORT_{symbol}"
            if signal_key not in sent_signals:
                send_telegram_alert(f"üî¥ SHORT_{symbol} - Gi√°: {current_price:.4f}")
                print(f"‚úÖ SHORT signal cho {symbol}")
                sent_signals[signal_key] = time.time()
            else:
                print(f"üîÑ SHORT signal cho {symbol} ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥")
        else:
            # Reset t√≠n hi·ªáu n·∫øu kh√¥ng c√≤n ƒëi·ªÅu ki·ªán
            long_key = f"LONG_{symbol}"
            short_key = f"SHORT_{symbol}"
            if long_key in sent_signals:
                del sent_signals[long_key]
                print(f"üîÑ Reset LONG signal cho {symbol}")
            if short_key in sent_signals:
                del sent_signals[short_key]
                print(f"üîÑ Reset SHORT signal cho {symbol}")
            print(f"‚ûñ Kh√¥ng c√≥ t√≠n hi·ªáu cho {symbol}")

    except Exception as e:
        print(f"L·ªói x·ª≠ l√Ω {symbol}: {str(e)}")


def cleanup_old_signals(max_age_hours=24):
    """D·ªçn d·∫πp c√°c t√≠n hi·ªáu c≈© h∆°n max_age_hours gi·ªù"""
    current_time = time.time()
    old_signals = []

    for signal_key, timestamp in sent_signals.items():
        if current_time - timestamp > max_age_hours * 3600:
            old_signals.append(signal_key)

    for signal_key in old_signals:
        del sent_signals[signal_key]
        print(f"üßπ ƒê√£ x√≥a t√≠n hi·ªáu c≈©: {signal_key}")

def ut_bot(coins=None, interval='1h', wait=60):
    """ 
    Bot UT Bot ho√†n ch·ªânh.
    """
    if coins is None:
        coins = ["BTCUSDT", "ETHUSDT", "LTCUSDT", "XRPUSDT"]

    print(f"Bot s·∫Ω theo d√µi {len(coins)} coin: {', '.join(coins)}")
    print(f"Interval: {interval}, Ch·ªù: {wait} gi√¢y gi·ªØa c√°c l·∫ßn qu√©t")

    while True:
        try:
            print(f"\n{'='*50}")
            print(f"B·∫Øt ƒë·∫ßu qu√©t l√∫c: {time.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"{'='*50}")

            # D·ªçn d·∫πp t√≠n hi·ªáu c≈© m·ªói 12 gi·ªù
            cleanup_old_signals(12)

            for symbol in coins:
                check_ut_bot(symbol=symbol, interval=interval)
                time.sleep(2)  # Tr√°nh spam API

            print(f"\nHo√†n th√†nh qu√©t. Ch·ªù {wait} gi√¢y...")
            print(f"üìä S·ªë t√≠n hi·ªáu ƒëang theo d√µi: {len(sent_signals)}")
            time.sleep(wait)

        except KeyboardInterrupt:
            print("\nBot ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
            break
        except Exception as e:
            print(f"L·ªói trong v√≤ng l·∫∑p ch√≠nh: {e}")
            time.sleep(30)  # Ch·ªù 30 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i


if __name__ == "__main__":
    print("üöÄ UT Bot b·∫Øt ƒë·∫ßu ch·∫°y...")

    # ƒê·ªãnh nghƒ©a danh s√°ch coin c·∫ßn theo d√µi
    coins_to_watch = [
        "BTCUSDT", "ETHUSDT", "LTCUSDT", "XRPUSDT", "SOLUSDT", "RLCUSDT",
        "OPUSDT", "THETAUSDT", "ETHBTC", "UNIUSDT", "SUIUSDT", "MAVUSDT",
        "STRKUSDT"
    ]

    # Ch·∫°y bot v·ªõi danh s√°ch coin ƒë√£ ƒë·ªãnh nghƒ©a
    ut_bot(coins=coins_to_watch, interval='1h', wait=300)
# main.py
from flask import Flask

app = Flask(__name__)


